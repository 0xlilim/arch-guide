(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[130],{409:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-5b5d34f0",path:"/advanced/system-ctl.html",title:"Linux 日常",lang:"zh-CN",frontmatter:{title:"Linux 日常"},excerpt:"",headers:[{level:2,title:"必须掌握的 Linux 知识",slug:"必须掌握的-linux-知识",children:[]},{level:2,title:"终端操作基础",slug:"终端操作基础",children:[]},{level:2,title:"Pacman 包管理",slug:"pacman-包管理",children:[]},{level:2,title:"终端编辑器的使用",slug:"终端编辑器的使用",children:[]},{level:2,title:"系统服务的操作与介绍",slug:"系统服务的操作与介绍",children:[]},{level:2,title:"系统硬件信息检测",slug:"系统硬件信息检测",children:[]},{level:2,title:"磁盘空间清理",slug:"磁盘空间清理",children:[{level:3,title:"清理 yay 缓存",slug:"清理-yay-缓存",children:[]},{level:3,title:"清理软件包缓存及孤立包",slug:"清理软件包缓存及孤立包",children:[]},{level:3,title:"考虑快照大小",slug:"考虑快照大小",children:[]}]},{level:2,title:"文件传输与系统备份",slug:"文件传输与系统备份",children:[]},{level:2,title:"文件解压缩",slug:"文件解压缩",children:[]},{level:2,title:"制作 windows10 启动盘",slug:"制作-windows10-启动盘",children:[]}],filePathRelative:"advanced/system-ctl.md",git:{updatedTime:1624249051e3,contributors:[{name:"icekylin",email:"wminid@yeah.net",commits:2}]}}},6280:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>ms});var e=a(6252);const l=(0,e.Wm)("h1",{id:"linux-日常操作与基础知识"},[(0,e.Wm)("a",{class:"header-anchor",href:"#linux-日常操作与基础知识"},"#"),(0,e.Uk)(" Linux 日常操作与基础知识")],-1),c=(0,e.Uk)("阅读完"),p=(0,e.Wm)("code",null,"新手上路",-1),o=(0,e.Uk)("章节，你的系统已完全可以使用，KDE 桌面环境提供了强大的 "),r={href:"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("GUI"),i=(0,e.Uk)(" 以供普通用户使用。按"),m=(0,e.Wm)("code",null,"windows",-1),d=(0,e.Uk)("键(Linux 下也常被叫做 Meta 键)呼出菜单栏，找到"),u=(0,e.Wm)("code",null,"设置",-1),b=(0,e.Uk)("=>"),h=(0,e.Wm)("code",null,"系统设置",-1),k=(0,e.Uk)("，可以找到绝大多数系统设置项。"),g=(0,e.uE)('<p>但如果想要游刃有余的掌控你的系统，你还需要阅读掌握本文的内容。<br> 如果你想进一步详细了解本文各部分的详细知识，可以点击在各个小节给出的拓展链接进行学习。<br> 如果你不想详细了解，本章介绍的知识也足够你来应付日常的使用。</p><h2 id="必须掌握的-linux-知识"><a class="header-anchor" href="#必须掌握的-linux-知识">#</a> 必须掌握的 Linux 知识</h2><p>此处只介绍最基本的，最必要的 Linux 知识点与小技巧 。</p><ol><li>在 Linux 中，文件目录结构与 Windows 完全不同。Windows 存在 C 盘，D 盘等盘符，而在 Linux 中不存在这些划分，最上层的目录是根目录，路径为 <em>/</em> ，并以一个树形结构从此向下一级一级区分。</li><li>对于 Linux 的树形文件结构，存在相对路径与绝对路径之分。绝对路径是代表从根路径 <em>/</em> 开始的完整路径，如<code>/home/testuser/Download</code>。相对路径代表从当前目录，到目标目录的一个部分路径。比如当前你所在的目录为<code>/home/testuser</code>，那么切换到绝对路径<code>/home/testuser/Download</code>的相对路径即为<code>./Download</code>。其中<code>./</code>代表从当前目录，再向下寻找。另外，<code>..</code>这种两个句点代表的是向上层寻找，比如你当前所在的路径为<code>/home/testuser/Download</code>，向上寻找到<code>/home/testuser/Desktop</code>的相对路径即为<code>../Desktop</code>。</li><li>简单来说，Linux 中存在两类用户。第一类用户即为 root 用户，也成为超级用户，它拥有系统中最高的权限。第二类用户就是除了 root 用户的普通用户，他们可以拥有不同等级的权限。使用 root 权限时需要十分小心。</li><li>理论上来说，任何图形化界面中的操作都可以用对应的命令行命令完成。如果你打开某个程序报错，不妨试试找到它的对应启动命令，在终端中执行此命令，并观察它运行时的错误日志输出，查阅相关资料，解决问题。</li></ol><h2 id="终端操作基础"><a class="header-anchor" href="#终端操作基础">#</a> 终端操作基础</h2><p>如果想要熟练掌握 Linux，就必须掌握终端的常见命令与使用方式。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ls</span> /some_path       <span class="token comment"># 查看某个文件夹下的文件与子文件夹 /代表根目录，是Linux最顶端的路径，是绝对路径</span>\n<span class="token builtin class-name">pwd</span>                 <span class="token comment"># 查看当前终端所在路径</span>\n<span class="token builtin class-name">cd</span> /home/testuser   <span class="token comment"># 切换目录命令，将当前终端切换到某一个路径下</span>\n<span class="token function">cp</span> ./a.cpp ./b.cpp  <span class="token comment"># 复制命令 将当前路径下的a.cpp复制一份为b.cpp ./代表当前文件夹所在路径，是相对路径</span>\n<span class="token function">cp</span> -r ./a ./b       <span class="token comment"># 复制整体文件夹</span>\n<span class="token function">rm</span> b.cpp            <span class="token comment"># 删除命令 删除b.cpp</span>\n<span class="token function">mv</span> a.cpp b.cpp      <span class="token comment"># 移动(重命名)命令 将a.cpp更名为b.cpp</span>\n<span class="token function">mkdir</span> new_folder    <span class="token comment"># 新建文件夹new_folder</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',7),v=(0,e.Uk)("拓展链接：推荐阅读在线进阶书籍 "),f={href:"https://archlinuxstudio.github.io/ShellTutorial/#/",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("Linux 命令行与 Shell 脚本教程"),y=(0,e.Uk)("。 群主也将提供与此书配套的教学视频 "),w={href:"https://bilibili.com",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("Linux 命令行与 Shell 教程"),U=(0,e.Wm)("sup",null,"TODO",-1),_=(0,e.Uk)("。"),S=(0,e.uE)('<h2 id="pacman-包管理"><a class="header-anchor" href="#pacman-包管理">#</a> Pacman 包管理</h2><p>在 Arch Linux 上安装的软件都通过 Pacman 来进行管理。你可以把它理解为一个软件管理器，可以进行软件的安装，删除，查询等。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> pacman -S package_name     <span class="token comment"># 安装软件包</span>\n<span class="token function">sudo</span> pacman -Syyu               <span class="token comment"># 升级系统 yy标记强制刷新 u标记升级动作</span>\n<span class="token function">sudo</span> pacman -R package_name     <span class="token comment"># 删除软件包</span>\n<span class="token function">sudo</span> pacman -Rs package_name    <span class="token comment"># 删除软件包，及其所有没有被其他已安装软件包使用的依赖包</span>\n<span class="token function">sudo</span> pacman -Qdt                <span class="token comment"># 找出孤立包 Q为查询本地软件包数据库 d标记依赖包 t标记不需要的包 dt合并标记孤立包</span>\n<span class="token function">sudo</span> pacman -Rs <span class="token variable"><span class="token variable">$(</span>pacman -Qtdq<span class="token variable">)</span></span> <span class="token comment"># 删除孤立软件包</span>\n<span class="token function">sudo</span> pacman -Fy                 <span class="token comment"># 更新命令查询文件列表数据库</span>\n<span class="token function">sudo</span> pacman -F xxx              <span class="token comment"># 当不知道某个命令属于哪个包时，用来查询某个xxx命令属于哪个包</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>一个好用的图形化包管理软件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yay -S octopi <span class="token comment">#包管理器前端界面</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',5),L=(0,e.Uk)("拓展链接: "),E={href:"https://wiki.archlinux.org/index.php/Pacman",target:"_blank",rel:"noopener noreferrer"},D=(0,e.Uk)("官方文档"),R=(0,e.uE)('<h2 id="终端编辑器的使用"><a class="header-anchor" href="#终端编辑器的使用">#</a> 终端编辑器的使用</h2><p>你需要掌握一个能在终端中进行文本编辑的软件，这里介绍 vim。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">vim</span> <span class="token number">1</span>.txt   <span class="token comment">#创建并编辑名为1.txt的文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>你可以看到进入了一个空的界面。此时你处在 vim 的<code>命令模式</code>。在<code>命令模式</code>下，可以用一些快捷指令来对文本进行操作。<br> 现在我们输入<code>a</code>进入 vim 的<code>编辑模式</code>，此时输入任意文本，即可进行编辑。<br> 在输入完成后，我们按下 Esc 键，即可从<code>编辑模式</code>退出到<code>命令模式</code>。此时输入<code>:wq</code>即可保存并退出 vim。<br> 下面介绍一些在命令模式下常用的命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>:wq     <span class="token comment"># 保存退出</span>\n:q<span class="token operator">!</span>     <span class="token comment"># 不保存，强制退出</span>\n<span class="token function">dd</span>      <span class="token comment"># 删除一行</span>\n2dd     <span class="token comment"># 删除两行</span>\ngg      <span class="token comment"># 回到文本第一行</span>\nshift+g  <span class="token comment"># 转到文本最后一行</span>\n/xxx    <span class="token comment"># 在文中搜索内容&#39;xxx&#39; 回车搜索，按n键转到下一个</span>\n?xxx   <span class="token comment"># 反向搜索</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>拓展链接：需要完整教程的同学可以在终端中输入命令<code>vimtutor</code>来学习完整的 vim 教程。</p><h2 id="系统服务的操作与介绍"><a class="header-anchor" href="#系统服务的操作与介绍">#</a> 系统服务的操作与介绍</h2><p>Linux 系统中运行着各种服务，你需要掌握查询，变更服务状态的方式。同时对创建服务最好也有大致的了解。这里讲述命令<code>systemctl</code>的用法。以 dhcpcd 为例</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>systemctl start dhcpcd          <span class="token comment"># 启动服务</span>\nsystemctl stop dhcpcd           <span class="token comment"># 停止服务</span>\nsystemctl restart dhcpcd        <span class="token comment"># 重启服务</span>\nsystemctl reload dhcpcd         <span class="token comment"># 重新加载服务以及它的配置文件</span>\nsystemctl status dhcpcd         <span class="token comment"># 查看服务状态</span>\nsystemctl <span class="token builtin class-name">enable</span> dhcpcd         <span class="token comment"># 设置开机启动服务</span>\nsystemctl <span class="token builtin class-name">enable</span> --now dhcpcd   <span class="token comment"># 设置服务为开机启动并立即启动这个单元:</span>\nsystemctl disable dhcpcd        <span class="token comment"># 取消开机自动启动</span>\nsystemctl daemon-reload dhcpcd  <span class="token comment"># 重新载入 systemd 配置 扫描新增或变更的服务单元 不会重新加载变更的配置 加载变更的配置用 reload</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',9),q=(0,e.Uk)("拓展链接: "),C={href:"https://wiki.archlinux.org/index.php/Systemd#Basic_systemctl_usage",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("systemctl 官方文档"),B=(0,e.Uk)(),P={href:"https://www.freedesktop.org/software/systemd/man/systemd.service.html#Examples",target:"_blank",rel:"noopener noreferrer"},A=(0,e.Uk)("systemd 配置文件样例解释"),F=(0,e.Wm)("h2",{id:"系统硬件信息检测"},[(0,e.Wm)("a",{class:"header-anchor",href:"#系统硬件信息检测"},"#"),(0,e.Uk)(" 系统硬件信息检测")],-1),z=(0,e.Uk)("磁盘检测："),G=(0,e.Wm)("br",null,null,-1),N=(0,e.Uk)(" 使用 "),O={href:"https://archlinux.org/packages/extra/x86_64/smartmontools/",target:"_blank",rel:"noopener noreferrer"},Q=(0,e.Uk)("smartmontools"),Y=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> pacman -S smartmontools\n<span class="token function">sudo</span> smartctl -A /dev/sda   <span class="token comment">#硬盘</span>\n<span class="token function">sudo</span> smartctl -d sat -A /dev/sdc <span class="token comment">#usb设备</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>磁盘空间分析：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">df</span> -h <span class="token comment"># 以人类可读格式显示文件系统磁盘使用情况统计</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),I=(0,e.Uk)("使用 "),M={href:"https://archlinux.org/packages/extra/x86_64/filelight/",target:"_blank",rel:"noopener noreferrer"},$=(0,e.Uk)("Filelight"),j=(0,e.uE)('<p>图形化界面直观查看磁盘占用情况</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> pacman -S filelight\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>cpu 与显卡：<br> 如下两款是目前找到的，最佳的图形化查看 cpu 与显卡信息的软件。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yay -S cpu-x\nyay -S gpu-viewer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>系统完整信息:<br> 使用 dmidecode 可以完整查看系统绝大部分硬件信息，包括较难得到的内存频率等。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> pacman -S dmidecode\n<span class="token function">sudo</span> dmidecode\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="磁盘空间清理"><a class="header-anchor" href="#磁盘空间清理">#</a> 磁盘空间清理</h2><p>有时需要对磁盘空间进行清理，以免磁盘空间不足，保证系统的正常运行。首先应结合上文对磁盘空间占用情况进行分析，随后采取对应的有效应对措施。下面介绍一些通用措施。</p><h3 id="清理-yay-缓存"><a class="header-anchor" href="#清理-yay-缓存">#</a> 清理 <code>yay</code> 缓存</h3><p>如果使用 <code>yay</code> 来安装 AUR 中的软件包的话，可以清理 <code>yay</code> 的缓存目录。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rm</span> -rf ~/.cache/yay\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="清理软件包缓存及孤立包"><a class="header-anchor" href="#清理软件包缓存及孤立包">#</a> 清理软件包缓存及孤立包</h3><p>执行以下命令清理软件包文件缓存及删除孤立软件包。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> pacman -Rns <span class="token variable"><span class="token variable">$(</span>pacman -Qtdq<span class="token variable">)</span></span> <span class="token comment"># 如上文所述，删除孤立软件包</span>\npaccache -r <span class="token comment"># 删除已安装和未安装包的所有缓存版本，但最近 3 个版本除外</span>\n<span class="token function">sudo</span> pacman -Sc <span class="token comment"># 删除当前未安装的所有缓存包和未使用的同步数据库（可选）</span>\n<span class="token function">sudo</span> pacman -Scc <span class="token comment"># 从缓存中删除所有文件，这是最激进的方法，不会在缓存文件夹中留下任何内容（一般不使用）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="考虑快照大小"><a class="header-anchor" href="#考虑快照大小">#</a> 考虑快照大小</h3><p>此外，若使用了 RSYNC 方式的 <code>Timeshift</code> 快照，还应考虑 <code>Timeshift</code> 快照占用情况。一般来说 RSYNC 方式的快照大小略大于当前实际使用大小。因为虽然 RSYNC 方式的快照是增量的，但历史最久远的快照依然是完整备份，随后是增量的。而简单来说增量大小取决于历史最久远的快照和最新快照之间的差异。通过 <code>Timeshift</code> 自动清理历史最久远的快照是简单有效的方法。</p><h2 id="文件传输与系统备份"><a class="header-anchor" href="#文件传输与系统备份">#</a> 文件传输与系统备份</h2>',17),H=(0,e.Uk)("有一点 Linux 经验的同学应该知道"),K={href:"https://wiki.archlinux.org/index.php/SCP_and_SFTP#Secure_copy_protocol_(SCP)",target:"_blank",rel:"noopener noreferrer"},J=(0,e.Uk)("scp"),V=(0,e.Uk)("这个命令。它常被用来在服务器间传输文件。但是目前它应该被更现代的工具"),X={href:"https://wiki.archlinux.org/index.php/Rsync",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("rsync"),ss=(0,e.Uk)("替代，其拥有即时压缩，差量传输等新特性。同时，"),ns=(0,e.Wm)("code",null,"rsync",-1),as=(0,e.Uk)("也被用来进行备份操作。"),es=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rsync</span> foo.txt me@server:/home/me/   <span class="token comment"># 最基础的复制文件 与scp的操作完全相同</span>\n<span class="token function">rsync</span> -a bar/ me@server:/home/me/   <span class="token comment"># -a 标记实现目录复制等 比scp -r 能更好的处理符号链接等情况</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ls=(0,e.Uk)("关于全盘备份，请阅读"),cs={href:"https://wiki.archlinux.org/index.php/Rsync#Full_system_backup",target:"_blank",rel:"noopener noreferrer"},ps=(0,e.Uk)("官方文档"),os=(0,e.uE)('<h2 id="文件解压缩"><a class="header-anchor" href="#文件解压缩">#</a> 文件解压缩</h2><p>除了众所周知的 tar 命令，我们在之前安装过的 ark 包可以配合 dolphin 文件管理器轻松的右键直接解压缩，其可选依赖提供了各个压缩格式的支持，可以自行选择安装。需要注意的是解压 windows 下的压缩包，可能会乱码。使用 unar 可以避免这个问题。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> pacman -S unarchiver\nunar xxx.zip\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="制作-windows10-启动盘"><a class="header-anchor" href="#制作-windows10-启动盘">#</a> 制作 windows10 启动盘</h2><p>你可能在 linux 下，有时需要制作 win10 的启动盘。在以往，在 linux 下制作一个 win10 启动盘还是很简单的，但是随着近几年微软的更新，其 iso 安装镜像中存在一个名为<code>install.wim</code>的文件，其大小已经超出了 4GB,超出了 fat32 所要求的单个文件最大 4GB 的限制。这使得必须用额外的步骤才能制作一个启动盘。这里依旧使用 fat32 格式是因为其兼容性是最好的，ntfs 的 uefi 启动盘很多情况下不被识别。</p><p>首先和基础安装中的部分步骤类似，首先用 parted 命令创建 U 盘的分区 label 为 gpt。接下来用 cfdisk 命令创建新分区，在 Type 中选择 Microsoft basic data。接下来使用 mkfs.vfat 命令格式化所创建的分区。这样 U 盘就准备好了。</p><p>接下来下载 win10 的 iso 镜像并解压。在某些文件管理器中，你会得到如下错误。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>This disc contains a <span class="token string">&quot;UDF&quot;</span> <span class="token function">file</span> system and requires an operating system\nthat supports the ISO-13346 <span class="token string">&quot;UDF&quot;</span> <span class="token function">file</span> system specification.w\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这种情况下则需要手动挂载并复制出来</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mount</span> -o loop /path/of/windows10.iso /mnt/your/mountpoint\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>得到复制出来的文件后，最后要进行的就是压缩 install.wim 文件，这里需要首先安装一个包</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> pacman -S wimlib\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接下来进行压缩，这一步会持续较长时间，耐心等待。完成后可以看到文件已经被压缩到了 3.x GB。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> wimlib-imagex optimize install.wim --solid\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最后把全部文件复制到 U 盘中即可。</p>',15),rs=(0,e.Uk)("Ref: "),ts={href:"https://www.dedoimedo.com/computers/windows-10-usb-media-linux.html",target:"_blank",rel:"noopener noreferrer"},is=(0,e.Uk)("[1]"),ms={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[l,(0,e.Wm)("p",null,[c,p,o,(0,e.Wm)("a",r,[t,(0,e.Wm)(a)]),i,m,d,u,b,h,k]),g,(0,e.Wm)("p",null,[v,(0,e.Wm)("a",f,[x,(0,e.Wm)(a)]),y,(0,e.Wm)("a",w,[W,(0,e.Wm)(a)]),U,_]),S,(0,e.Wm)("p",null,[L,(0,e.Wm)("a",E,[D,(0,e.Wm)(a)])]),R,(0,e.Wm)("p",null,[q,(0,e.Wm)("a",C,[T,(0,e.Wm)(a)]),B,(0,e.Wm)("a",P,[A,(0,e.Wm)(a)])]),F,(0,e.Wm)("p",null,[z,G,N,(0,e.Wm)("a",O,[Q,(0,e.Wm)(a)])]),Y,(0,e.Wm)("p",null,[I,(0,e.Wm)("a",M,[$,(0,e.Wm)(a)])]),j,(0,e.Wm)("p",null,[H,(0,e.Wm)("a",K,[J,(0,e.Wm)(a)]),V,(0,e.Wm)("a",X,[Z,(0,e.Wm)(a)]),ss,ns,as]),es,(0,e.Wm)("p",null,[ls,(0,e.Wm)("a",cs,[ps,(0,e.Wm)(a)])]),os,(0,e.Wm)("p",null,[rs,(0,e.Wm)("a",ts,[is,(0,e.Wm)(a)])])],64)}}}}]);